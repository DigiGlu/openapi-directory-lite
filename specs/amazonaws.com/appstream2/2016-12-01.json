{
  "swagger": "2.0",
  "info": {
    "version": "2016-12-01",
    "x-release": "v4",
    "title": "Amazon AppStream",
    "description": "<fullname>Amazon AppStream 2.0</fullname> <p>You can use Amazon AppStream 2.0 to stream desktop applications to any device running a web browser, without rewriting them.</p>",
    "x-logo": {"url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg", "backgroundColor": "#FFFFFF"},
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {"name": "Mike Ralphson", "email": "mike.ralphson@gmail.com", "url": "https://github.com/mermade/aws2openapi"},
    "license": {"name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/"},
    "x-providerName": "amazonaws.com",
    "x-serviceName": "appstream2",
    "x-origin": [
      {
        "contentType": "application/json",
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appstream-2016-12-01.normal.json",
        "converter": {"url": "https://github.com/mermade/aws2openapi", "version": "1.0.0"},
        "x-apisguru-direct": true
      }
    ],
    "x-apiClientRegistration": {"url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"},
    "x-apisguru-categories": ["cloud"],
    "x-preferred": true
  },
  "externalDocs": {"description": "Amazon Web Services documentation", "url": "https://aws.amazon.com/appstream2/"},
  "host": "appstream2.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "parameters": {
    "Action": {"name": "Action", "in": "header", "type": "string", "required": true},
    "Version": {"name": "Version", "in": "header", "type": "string", "required": true},
    "X-Amz-Content-Sha256": {"name": "X-Amz-Content-Sha256", "in": "header", "type": "string", "required": false},
    "X-Amz-Date": {"name": "X-Amz-Date", "in": "header", "type": "string", "required": false},
    "X-Amz-Algorithm": {"name": "X-Amz-Algorithm", "in": "header", "type": "string", "required": false},
    "X-Amz-Credential": {"name": "X-Amz-Credential", "in": "header", "type": "string", "required": false},
    "X-Amz-Security-Token": {"name": "X-Amz-Security-Token", "in": "header", "type": "string", "required": false},
    "X-Amz-Signature": {"name": "X-Amz-Signature", "in": "header", "type": "string", "required": false},
    "X-Amz-SignedHeaders": {"name": "X-Amz-SignedHeaders", "in": "header", "type": "string", "required": false}
  },
  "securityDefinitions": {"hmac": {"type": "apiKey", "name": "Authorization", "in": "header", "description": "Amazon Signature authorization v4", "x-amazon-apigateway-authtype": "awsSigv4"}},
  "security": [{"hmac": []}],
  "paths": {
    "/": {
      "post": {
        "operationId": "AssociateFleet",
        "description": "Associates the specified fleet with the specified stack.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/AssociateFleetResult"}},
          "480": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}},
          "483": {"description": "IncompatibleImageException", "schema": {"$ref": "#/definitions/IncompatibleImageException"}},
          "484": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/AssociateFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateDirectoryConfig": {
      "post": {
        "operationId": "CreateDirectoryConfig",
        "description": "Creates a directory configuration.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateDirectoryConfigResult"}},
          "480": {"description": "ResourceAlreadyExistsException", "schema": {"$ref": "#/definitions/ResourceAlreadyExistsException"}},
          "481": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateDirectoryConfigRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateFleet": {
      "post": {
        "operationId": "CreateFleet",
        "description": "Creates a fleet.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateFleetResult"}},
          "480": {"description": "ResourceAlreadyExistsException", "schema": {"$ref": "#/definitions/ResourceAlreadyExistsException"}},
          "481": {"description": "ResourceNotAvailableException", "schema": {"$ref": "#/definitions/ResourceNotAvailableException"}},
          "482": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "483": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "484": {"description": "InvalidRoleException", "schema": {"$ref": "#/definitions/InvalidRoleException"}},
          "485": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}},
          "486": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}},
          "487": {"description": "IncompatibleImageException", "schema": {"$ref": "#/definitions/IncompatibleImageException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateImageBuilder": {
      "post": {
        "operationId": "CreateImageBuilder",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateImageBuilderResult"}},
          "480": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "481": {"description": "ResourceAlreadyExistsException", "schema": {"$ref": "#/definitions/ResourceAlreadyExistsException"}},
          "482": {"description": "ResourceNotAvailableException", "schema": {"$ref": "#/definitions/ResourceNotAvailableException"}},
          "483": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "484": {"description": "InvalidRoleException", "schema": {"$ref": "#/definitions/InvalidRoleException"}},
          "485": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}},
          "486": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}},
          "487": {"description": "IncompatibleImageException", "schema": {"$ref": "#/definitions/IncompatibleImageException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateImageBuilderRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateImageBuilderStreamingURL": {
      "post": {
        "operationId": "CreateImageBuilderStreamingURL",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateImageBuilderStreamingURLResult"}},
          "480": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateImageBuilderStreamingURLRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateStack": {
      "post": {
        "operationId": "CreateStack",
        "description": "Creates a stack.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateStackResult"}},
          "480": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "481": {"description": "ResourceAlreadyExistsException", "schema": {"$ref": "#/definitions/ResourceAlreadyExistsException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}},
          "483": {"description": "InvalidRoleException", "schema": {"$ref": "#/definitions/InvalidRoleException"}},
          "484": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "485": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateStackRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#CreateStreamingURL": {
      "post": {
        "operationId": "CreateStreamingURL",
        "description": "<p>Creates a URL to start a streaming session for the specified user.</p> <p>By default, the URL is valid only for one minute from the time that it is generated.</p>",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/CreateStreamingURLResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "ResourceNotAvailableException", "schema": {"$ref": "#/definitions/ResourceNotAvailableException"}},
          "482": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "483": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CreateStreamingURLRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DeleteDirectoryConfig": {
      "post": {
        "operationId": "DeleteDirectoryConfig",
        "description": "Deletes the specified directory configuration.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DeleteDirectoryConfigResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DeleteDirectoryConfigRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DeleteFleet": {
      "post": {
        "operationId": "DeleteFleet",
        "description": "Deletes the specified fleet.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DeleteFleetResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DeleteFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DeleteImage": {
      "post": {
        "operationId": "DeleteImage",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DeleteImageResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "483": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DeleteImageRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DeleteImageBuilder": {
      "post": {
        "operationId": "DeleteImageBuilder",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DeleteImageBuilderResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DeleteImageBuilderRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DeleteStack": {
      "post": {
        "operationId": "DeleteStack",
        "description": "Deletes the specified stack. After this operation completes, the environment can no longer be activated and any reservations made for the stack are released.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DeleteStackResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DeleteStackRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeDirectoryConfigs": {
      "post": {
        "operationId": "DescribeDirectoryConfigs",
        "description": "Describes the specified directory configurations.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeDirectoryConfigsResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeDirectoryConfigsRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeFleets": {
      "post": {
        "operationId": "DescribeFleets",
        "description": "Describes the specified fleets or all fleets in the account.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeFleetsResult"}}, "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeFleetsRequest"}}],
        "x-waiters": [
          {
            "delay": 30,
            "maxAttempts": 40,
            "operation": "DescribeFleets",
            "acceptors": [
              {"state": "success", "matcher": "pathAll", "argument": "Fleets[].State", "expected": "ACTIVE"},
              {"state": "failure", "matcher": "pathAny", "argument": "Fleets[].State", "expected": "PENDING_DEACTIVATE"},
              {"state": "failure", "matcher": "pathAny", "argument": "Fleets[].State", "expected": "INACTIVE"}
            ]
          },
          {
            "delay": 30,
            "maxAttempts": 40,
            "operation": "DescribeFleets",
            "acceptors": [
              {"state": "success", "matcher": "pathAll", "argument": "Fleets[].State", "expected": "INACTIVE"},
              {"state": "failure", "matcher": "pathAny", "argument": "Fleets[].State", "expected": "PENDING_ACTIVATE"},
              {"state": "failure", "matcher": "pathAny", "argument": "Fleets[].State", "expected": "ACTIVE"}
            ]
          }
        ]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeImageBuilders": {
      "post": {
        "operationId": "DescribeImageBuilders",
        "description": "",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeImageBuildersResult"}}, "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeImageBuildersRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeImages": {
      "post": {
        "operationId": "DescribeImages",
        "description": "Describes the specified images or all images in the account.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeImagesResult"}}, "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeImagesRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeSessions": {
      "post": {
        "operationId": "DescribeSessions",
        "description": "Describes the streaming sessions for the specified stack and fleet. If a user ID is provided, only the streaming sessions for only that user are returned. If an authentication type is not provided, the default is to authenticate users using a streaming URL.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeSessionsResult"}},
          "480": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeSessionsRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DescribeStacks": {
      "post": {
        "operationId": "DescribeStacks",
        "description": "Describes the specified stacks or all stacks in the account.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/DescribeStacksResult"}}, "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DescribeStacksRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#DisassociateFleet": {
      "post": {
        "operationId": "DisassociateFleet",
        "description": "Disassociates the specified fleet from the specified stack.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/DisassociateFleetResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/DisassociateFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#ExpireSession": {
      "post": {
        "operationId": "ExpireSession",
        "description": "Stops the specified streaming session.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/ExpireSessionResult"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/ExpireSessionRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#ListAssociatedFleets": {
      "post": {
        "operationId": "ListAssociatedFleets",
        "description": "Lists the fleets associated with the specified stack.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/ListAssociatedFleetsResult"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/ListAssociatedFleetsRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#ListAssociatedStacks": {
      "post": {
        "operationId": "ListAssociatedStacks",
        "description": "Lists the stacks associated with the specified fleet.",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/ListAssociatedStacksResult"}}},
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/ListAssociatedStacksRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#StartFleet": {
      "post": {
        "operationId": "StartFleet",
        "description": "Starts the specified fleet.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/StartFleetResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "482": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "483": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/StartFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#StartImageBuilder": {
      "post": {
        "operationId": "StartImageBuilder",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/StartImageBuilderResult"}},
          "480": {"description": "ResourceNotAvailableException", "schema": {"$ref": "#/definitions/ResourceNotAvailableException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/StartImageBuilderRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#StopFleet": {
      "post": {
        "operationId": "StopFleet",
        "description": "Stops the specified fleet.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/StopFleetResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/StopFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#StopImageBuilder": {
      "post": {
        "operationId": "StopImageBuilder",
        "description": "",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/StopImageBuilderResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/StopImageBuilderRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#UpdateDirectoryConfig": {
      "post": {
        "operationId": "UpdateDirectoryConfig",
        "description": "Updates the specified directory configuration.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/UpdateDirectoryConfigResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "482": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/UpdateDirectoryConfigRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#UpdateFleet": {
      "post": {
        "operationId": "UpdateFleet",
        "description": "<p>Updates the specified fleet.</p> <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except the fleet name. If the fleet is in the <code>RUNNING</code> state, you can update the <code>DisplayName</code> and <code>ComputeCapacity</code> attributes. If the fleet is in the <code>STARTING</code> or <code>STOPPING</code> state, you can't update it.</p>",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/UpdateFleetResult"}},
          "480": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "481": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "482": {"description": "InvalidRoleException", "schema": {"$ref": "#/definitions/InvalidRoleException"}},
          "483": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "484": {"description": "ResourceNotAvailableException", "schema": {"$ref": "#/definitions/ResourceNotAvailableException"}},
          "485": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}},
          "486": {"description": "ConcurrentModificationException", "schema": {"$ref": "#/definitions/ConcurrentModificationException"}},
          "487": {"description": "IncompatibleImageException", "schema": {"$ref": "#/definitions/IncompatibleImageException"}},
          "488": {"description": "OperationNotPermittedException", "schema": {"$ref": "#/definitions/OperationNotPermittedException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/UpdateFleetRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    },
    "/#UpdateStack": {
      "post": {
        "operationId": "UpdateStack",
        "description": "Updates the specified stack.",
        "responses": {
          "200": {"description": "Success", "schema": {"$ref": "#/definitions/UpdateStackResult"}},
          "480": {"description": "ResourceNotFoundException", "schema": {"$ref": "#/definitions/ResourceNotFoundException"}},
          "481": {"description": "ResourceInUseException", "schema": {"$ref": "#/definitions/ResourceInUseException"}},
          "482": {"description": "InvalidRoleException", "schema": {"$ref": "#/definitions/InvalidRoleException"}},
          "483": {"description": "InvalidParameterCombinationException", "schema": {"$ref": "#/definitions/InvalidParameterCombinationException"}},
          "484": {"description": "LimitExceededException", "schema": {"$ref": "#/definitions/LimitExceededException"}},
          "485": {"description": "IncompatibleImageException", "schema": {"$ref": "#/definitions/IncompatibleImageException"}}
        },
        "parameters": [{"name": "body", "in": "body", "required": true, "schema": {"$ref": "#/definitions/UpdateStackRequest"}}]
      },
      "parameters": [
        {"$ref": "#/parameters/Action"},
        {"$ref": "#/parameters/Version"},
        {"$ref": "#/parameters/X-Amz-Content-Sha256"},
        {"$ref": "#/parameters/X-Amz-Date"},
        {"$ref": "#/parameters/X-Amz-Algorithm"},
        {"$ref": "#/parameters/X-Amz-Credential"},
        {"$ref": "#/parameters/X-Amz-Security-Token"},
        {"$ref": "#/parameters/X-Amz-Signature"},
        {"$ref": "#/parameters/X-Amz-SignedHeaders"}
      ]
    }
  },
  "definitions": {
    "AccountName": {"type": "string", "minLength": 1, "format": "password"},
    "AccountPassword": {"type": "string", "minLength": 1, "maxLength": 127, "format": "password"},
    "Application": {
      "type": "object",
      "properties": {
        "Name": {"$ref": "#/definitions/String", "description": "The name of the application."},
        "DisplayName": {"$ref": "#/definitions/String", "description": "The application name displayed to end users."},
        "IconURL": {"$ref": "#/definitions/String", "description": "The URL for the application icon. This URL might be time-limited."},
        "LaunchPath": {"$ref": "#/definitions/String", "description": "The path to the application executable in the instance."},
        "LaunchParameters": {"$ref": "#/definitions/String", "description": "The arguments that are passed to the application at launch."},
        "Enabled": {"$ref": "#/definitions/Boolean", "description": "If there is a problem, the application can be disabled after image creation."},
        "Metadata": {"$ref": "#/definitions/Metadata", "description": "Additional attributes that describe the application."}
      },
      "description": "Describes an application in the application catalog."
    },
    "Applications": {"type": "array", "items": {"$ref": "#/definitions/Application"}},
    "Arn": {"type": "string", "pattern": "^arn:aws:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$"},
    "AssociateFleetRequest": {
      "type": "object",
      "required": ["FleetName", "StackName"],
      "properties": {"FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet."}, "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack."}}
    },
    "AssociateFleetResult": {"type": "object", "properties": {}},
    "AuthenticationType": {"type": "string", "enum": ["API", "SAML", "USERPOOL"]},
    "Boolean": {"type": "boolean"},
    "BooleanObject": {"type": "boolean"},
    "ComputeCapacity": {
      "type": "object",
      "required": ["DesiredInstances"],
      "properties": {"DesiredInstances": {"$ref": "#/definitions/Integer", "description": "The desired number of streaming instances."}},
      "description": "Describes the capacity for a fleet."
    },
    "ComputeCapacityStatus": {
      "type": "object",
      "required": ["Desired"],
      "properties": {
        "Desired": {"$ref": "#/definitions/Integer", "description": "The desired number of streaming instances."},
        "Running": {"$ref": "#/definitions/Integer", "description": "The total number of simultaneous streaming instances that are running."},
        "InUse": {"$ref": "#/definitions/Integer", "description": "The number of instances in use for streaming."},
        "Available": {"$ref": "#/definitions/Integer", "description": "The number of currently available instances that can be used to stream sessions."}
      },
      "description": "Describes the capacity status for a fleet."
    },
    "ConcurrentModificationException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "An API error occurred. Wait a few minutes and try again."},
    "CreateDirectoryConfigRequest": {
      "type": "object",
      "required": ["DirectoryName", "OrganizationalUnitDistinguishedNames", "ServiceAccountCredentials"],
      "properties": {
        "DirectoryName": {"$ref": "#/definitions/DirectoryName", "description": "The fully qualified name of the directory (for example, corp.example.com)."},
        "OrganizationalUnitDistinguishedNames": {"$ref": "#/definitions/OrganizationalUnitDistinguishedNamesList", "description": "The distinguished names of the organizational units for computer accounts."},
        "ServiceAccountCredentials": {"$ref": "#/definitions/ServiceAccountCredentials", "description": "The credentials for the service account used by the streaming instance to connect to the directory."}
      }
    },
    "CreateDirectoryConfigResult": {"type": "object", "properties": {"DirectoryConfig": {"$ref": "#/definitions/DirectoryConfig", "description": "Information about the directory configuration."}}},
    "CreateFleetRequest": {
      "type": "object",
      "required": ["Name", "ImageName", "InstanceType", "ComputeCapacity"],
      "properties": {
        "Name": {"$ref": "#/definitions/Name", "description": "A unique name for the fleet."},
        "ImageName": {"$ref": "#/definitions/String", "description": "The name of the image used by the fleet."},
        "InstanceType": {
          "$ref": "#/definitions/String",
          "description": "<p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>"
        },
        "FleetType": {"$ref": "#/definitions/FleetType"},
        "ComputeCapacity": {"$ref": "#/definitions/ComputeCapacity", "description": "The desired capacity for the fleet."},
        "VpcConfig": {"$ref": "#/definitions/VpcConfig", "description": "The VPC configuration for the fleet."},
        "MaxUserDurationInSeconds": {"$ref": "#/definitions/Integer", "description": "The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600."},
        "DisconnectTimeoutInSeconds": {
          "$ref": "#/definitions/Integer",
          "description": "The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600."
        },
        "Description": {"$ref": "#/definitions/Description", "description": "The description displayed to end users."},
        "DisplayName": {"$ref": "#/definitions/DisplayName", "description": "The fleet name displayed to end users."},
        "EnableDefaultInternetAccess": {"$ref": "#/definitions/BooleanObject", "description": "Enables or disables default internet access for the fleet."},
        "DomainJoinInfo": {"$ref": "#/definitions/DomainJoinInfo", "description": "The information needed for streaming instances to join a domain."}
      }
    },
    "CreateFleetResult": {"type": "object", "properties": {"Fleet": {"$ref": "#/definitions/Fleet", "description": "Information about the fleet."}}},
    "CreateImageBuilderRequest": {
      "type": "object",
      "required": ["Name", "ImageName", "InstanceType"],
      "properties": {
        "Name": {"$ref": "#/definitions/Name"},
        "ImageName": {"$ref": "#/definitions/String"},
        "InstanceType": {"$ref": "#/definitions/String"},
        "Description": {"$ref": "#/definitions/Description"},
        "DisplayName": {"$ref": "#/definitions/DisplayName"},
        "VpcConfig": {"$ref": "#/definitions/VpcConfig"},
        "EnableDefaultInternetAccess": {"$ref": "#/definitions/BooleanObject"},
        "DomainJoinInfo": {"$ref": "#/definitions/DomainJoinInfo"}
      }
    },
    "CreateImageBuilderResult": {"type": "object", "properties": {"ImageBuilder": {"$ref": "#/definitions/ImageBuilder"}}},
    "CreateImageBuilderStreamingURLRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String"}, "Validity": {"$ref": "#/definitions/Long"}}},
    "CreateImageBuilderStreamingURLResult": {"type": "object", "properties": {"StreamingURL": {"$ref": "#/definitions/String"}, "Expires": {"$ref": "#/definitions/Timestamp"}}},
    "CreateStackRequest": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "Name": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "Description": {"$ref": "#/definitions/Description", "description": "The description displayed to end users."},
        "DisplayName": {"$ref": "#/definitions/DisplayName", "description": "The stack name displayed to end users."},
        "StorageConnectors": {"$ref": "#/definitions/StorageConnectorList", "description": "The storage connectors to enable."}
      }
    },
    "CreateStackResult": {"type": "object", "properties": {"Stack": {"$ref": "#/definitions/Stack", "description": "Information about the stack."}}},
    "CreateStreamingURLRequest": {
      "type": "object",
      "required": ["StackName", "FleetName", "UserId"],
      "properties": {
        "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet."},
        "UserId": {"$ref": "#/definitions/StreamingUrlUserId", "description": "The ID of the user."},
        "ApplicationId": {"$ref": "#/definitions/String", "description": "The ID of the application that must be launched after the session starts."},
        "Validity": {"$ref": "#/definitions/Long", "description": "The time that the streaming URL will be valid, in seconds. Specify a value between 1 and 604800 seconds."},
        "SessionContext": {"$ref": "#/definitions/String", "description": "The session context of the streaming URL."}
      }
    },
    "CreateStreamingURLResult": {
      "type": "object",
      "properties": {
        "StreamingURL": {"$ref": "#/definitions/String", "description": "The URL to start the AppStream 2.0 streaming session."},
        "Expires": {"$ref": "#/definitions/Timestamp", "description": "The elapsed time, in seconds after the Unix epoch, when this URL expires."}
      }
    },
    "DeleteDirectoryConfigRequest": {"type": "object", "required": ["DirectoryName"], "properties": {"DirectoryName": {"$ref": "#/definitions/DirectoryName", "description": "The name of the directory configuration."}}},
    "DeleteDirectoryConfigResult": {"type": "object", "properties": {}},
    "DeleteFleetRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String", "description": "The name of the fleet."}}},
    "DeleteFleetResult": {"type": "object", "properties": {}},
    "DeleteImageBuilderRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/Name"}}},
    "DeleteImageBuilderResult": {"type": "object", "properties": {"ImageBuilder": {"$ref": "#/definitions/ImageBuilder"}}},
    "DeleteImageRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/Name"}}},
    "DeleteImageResult": {"type": "object", "properties": {"Image": {"$ref": "#/definitions/Image"}}},
    "DeleteStackRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String", "description": "The name of the stack."}}},
    "DeleteStackResult": {"type": "object", "properties": {}},
    "DescribeDirectoryConfigsRequest": {
      "type": "object",
      "properties": {
        "DirectoryNames": {"$ref": "#/definitions/DirectoryNameList", "description": "The directory names."},
        "MaxResults": {"$ref": "#/definitions/Integer", "description": "The maximum size of each page of results."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."}
      }
    },
    "DescribeDirectoryConfigsResult": {
      "type": "object",
      "properties": {
        "DirectoryConfigs": {"$ref": "#/definitions/DirectoryConfigList", "description": "Information about the directory configurations."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "DescribeFleetsRequest": {
      "type": "object",
      "properties": {
        "Names": {"$ref": "#/definitions/StringList", "description": "The names of the fleets to describe."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."}
      }
    },
    "DescribeFleetsResult": {
      "type": "object",
      "properties": {
        "Fleets": {"$ref": "#/definitions/FleetList", "description": "Information about the fleets."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "DescribeImageBuildersRequest": {"type": "object", "properties": {"Names": {"$ref": "#/definitions/StringList"}, "MaxResults": {"$ref": "#/definitions/Integer"}, "NextToken": {"$ref": "#/definitions/String"}}},
    "DescribeImageBuildersResult": {"type": "object", "properties": {"ImageBuilders": {"$ref": "#/definitions/ImageBuilderList"}, "NextToken": {"$ref": "#/definitions/String"}}},
    "DescribeImagesRequest": {"type": "object", "properties": {"Names": {"$ref": "#/definitions/StringList", "description": "The names of the images to describe."}}},
    "DescribeImagesResult": {"type": "object", "properties": {"Images": {"$ref": "#/definitions/ImageList", "description": "Information about the images."}}},
    "DescribeSessionsRequest": {
      "type": "object",
      "required": ["StackName", "FleetName"],
      "properties": {
        "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet."},
        "UserId": {"$ref": "#/definitions/UserId", "description": "The user ID."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."},
        "Limit": {"$ref": "#/definitions/Integer", "description": "The size of each page of results. The default value is 20 and the maximum value is 50."},
        "AuthenticationType": {
          "$ref": "#/definitions/AuthenticationType",
          "description": "The authentication method. Specify <code>API</code> for a user authenticated using a streaming URL or <code>SAML</code> for a SAML federated user. The default is to authenticate users using a streaming URL."
        }
      }
    },
    "DescribeSessionsResult": {
      "type": "object",
      "properties": {
        "Sessions": {"$ref": "#/definitions/SessionList", "description": "Information about the streaming sessions."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "DescribeStacksRequest": {
      "type": "object",
      "properties": {
        "Names": {"$ref": "#/definitions/StringList", "description": "The names of the stacks to describe."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."}
      }
    },
    "DescribeStacksResult": {
      "type": "object",
      "properties": {
        "Stacks": {"$ref": "#/definitions/StackList", "description": "Information about the stacks."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "Description": {"type": "string", "maxLength": 256},
    "DirectoryConfig": {
      "type": "object",
      "required": ["DirectoryName"],
      "properties": {
        "DirectoryName": {"$ref": "#/definitions/DirectoryName", "description": "The fully qualified name of the directory (for example, corp.example.com)."},
        "OrganizationalUnitDistinguishedNames": {"$ref": "#/definitions/OrganizationalUnitDistinguishedNamesList", "description": "The distinguished names of the organizational units for computer accounts."},
        "ServiceAccountCredentials": {"$ref": "#/definitions/ServiceAccountCredentials", "description": "The credentials for the service account used by the streaming instance to connect to the directory."},
        "CreatedTime": {"$ref": "#/definitions/Timestamp", "description": "The time the directory configuration was created."}
      },
      "description": "Configuration information for the directory used to join domains."
    },
    "DirectoryConfigList": {"type": "array", "items": {"$ref": "#/definitions/DirectoryConfig"}},
    "DirectoryName": {"type": "string"},
    "DirectoryNameList": {"type": "array", "items": {"$ref": "#/definitions/DirectoryName"}},
    "DisassociateFleetRequest": {
      "type": "object",
      "required": ["FleetName", "StackName"],
      "properties": {"FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet."}, "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack."}}
    },
    "DisassociateFleetResult": {"type": "object", "properties": {}},
    "DisplayName": {"type": "string", "maxLength": 100},
    "DomainJoinInfo": {
      "type": "object",
      "properties": {
        "DirectoryName": {"$ref": "#/definitions/DirectoryName", "description": "The fully qualified name of the directory (for example, corp.example.com)."},
        "OrganizationalUnitDistinguishedName": {"$ref": "#/definitions/OrganizationalUnitDistinguishedName", "description": "The distinguished name of the organizational unit for computer accounts."}
      },
      "description": "Contains the information needed for streaming instances to join a domain."
    },
    "ErrorMessage": {"type": "string", "description": "The error message in the exception."},
    "ExpireSessionRequest": {"type": "object", "required": ["SessionId"], "properties": {"SessionId": {"$ref": "#/definitions/String", "description": "The ID of the streaming session."}}},
    "ExpireSessionResult": {"type": "object", "properties": {}},
    "Fleet": {
      "type": "object",
      "required": ["Arn", "Name", "ImageName", "InstanceType", "ComputeCapacityStatus", "State"],
      "properties": {
        "Arn": {"$ref": "#/definitions/Arn", "description": "The ARN for the fleet."},
        "Name": {"$ref": "#/definitions/String", "description": "The name of the fleet."},
        "DisplayName": {"$ref": "#/definitions/String", "description": "The fleet name displayed to end users."},
        "Description": {"$ref": "#/definitions/String", "description": "The description displayed to end users."},
        "ImageName": {"$ref": "#/definitions/String", "description": "The image used by the fleet."},
        "InstanceType": {"$ref": "#/definitions/String", "description": "The instance type to use when launching fleet instances."},
        "FleetType": {"$ref": "#/definitions/FleetType"},
        "ComputeCapacityStatus": {"$ref": "#/definitions/ComputeCapacityStatus", "description": "The capacity status for the fleet."},
        "MaxUserDurationInSeconds": {"$ref": "#/definitions/Integer", "description": "The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600."},
        "DisconnectTimeoutInSeconds": {
          "$ref": "#/definitions/Integer",
          "description": "The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600."
        },
        "State": {"$ref": "#/definitions/FleetState", "description": "The current state for the fleet."},
        "VpcConfig": {"$ref": "#/definitions/VpcConfig", "description": "The VPC configuration for the fleet."},
        "CreatedTime": {"$ref": "#/definitions/Timestamp", "description": "The time the fleet was created."},
        "FleetErrors": {"$ref": "#/definitions/FleetErrors", "description": "The fleet errors."},
        "EnableDefaultInternetAccess": {"$ref": "#/definitions/BooleanObject", "description": "Indicates whether default internet access is enabled for the fleet."},
        "DomainJoinInfo": {"$ref": "#/definitions/DomainJoinInfo", "description": "The information needed for streaming instances to join a domain."}
      },
      "description": "Contains the parameters for a fleet."
    },
    "FleetAttribute": {"type": "string", "enum": ["VPC_CONFIGURATION", "VPC_CONFIGURATION_SECURITY_GROUP_IDS", "DOMAIN_JOIN_INFO"], "description": "The fleet attribute."},
    "FleetAttributes": {"type": "array", "description": "The fleet attributes.", "items": {"$ref": "#/definitions/FleetAttribute"}},
    "FleetError": {
      "type": "object",
      "properties": {"ErrorCode": {"$ref": "#/definitions/FleetErrorCode", "description": "The error code."}, "ErrorMessage": {"$ref": "#/definitions/String", "description": "The error message."}},
      "description": "Describes a fleet error."
    },
    "FleetErrorCode": {
      "type": "string",
      "enum": [
        "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
        "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
        "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
        "NETWORK_INTERFACE_LIMIT_EXCEEDED",
        "INTERNAL_SERVICE_ERROR",
        "IAM_SERVICE_ROLE_IS_MISSING",
        "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
        "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
        "SUBNET_NOT_FOUND",
        "IMAGE_NOT_FOUND",
        "INVALID_SUBNET_CONFIGURATION",
        "SECURITY_GROUPS_NOT_FOUND",
        "IGW_NOT_ATTACHED",
        "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
        "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
        "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
        "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
        "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
        "DOMAIN_JOIN_ERROR_MORE_DATA",
        "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
        "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
        "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
        "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
        "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
        "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
        "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
      ]
    },
    "FleetErrors": {"type": "array", "items": {"$ref": "#/definitions/FleetError"}},
    "FleetList": {"type": "array", "description": "The fleets.", "items": {"$ref": "#/definitions/Fleet"}},
    "FleetState": {"type": "string", "enum": ["STARTING", "RUNNING", "STOPPING", "STOPPED"]},
    "FleetType": {"type": "string", "enum": ["ALWAYS_ON", "ON_DEMAND"]},
    "Image": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "Name": {"$ref": "#/definitions/String", "description": "The name of the image."},
        "Arn": {"$ref": "#/definitions/Arn", "description": "The ARN of the image."},
        "BaseImageArn": {"$ref": "#/definitions/Arn", "description": "The ARN of the image from which this image was created."},
        "DisplayName": {"$ref": "#/definitions/String", "description": "The image name displayed to end users."},
        "State": {
          "$ref": "#/definitions/ImageState",
          "description": "The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>."
        },
        "Visibility": {"$ref": "#/definitions/VisibilityType", "description": "Indicates whether the image is public or private."},
        "ImageBuilderSupported": {"$ref": "#/definitions/Boolean", "description": "Indicates whether an image builder can be launched from this image."},
        "Platform": {"$ref": "#/definitions/PlatformType", "description": "The operating system platform of the image."},
        "Description": {"$ref": "#/definitions/String", "description": "The description displayed to end users."},
        "StateChangeReason": {"$ref": "#/definitions/ImageStateChangeReason", "description": "The reason why the last state change occurred."},
        "Applications": {"$ref": "#/definitions/Applications", "description": "The applications associated with the image."},
        "CreatedTime": {"$ref": "#/definitions/Timestamp", "description": "The time the image was created."},
        "PublicBaseImageReleasedDate": {"$ref": "#/definitions/Timestamp", "description": "The release date of the public base image. For private images, this date is the release date of the base image from which the image was created."}
      },
      "description": "Describes an image."
    },
    "ImageBuilder": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "Name": {"$ref": "#/definitions/String"},
        "Arn": {"$ref": "#/definitions/Arn"},
        "ImageArn": {"$ref": "#/definitions/Arn"},
        "Description": {"$ref": "#/definitions/String"},
        "DisplayName": {"$ref": "#/definitions/String"},
        "VpcConfig": {"$ref": "#/definitions/VpcConfig"},
        "InstanceType": {"$ref": "#/definitions/String"},
        "Platform": {"$ref": "#/definitions/PlatformType"},
        "State": {"$ref": "#/definitions/ImageBuilderState"},
        "StateChangeReason": {"$ref": "#/definitions/ImageBuilderStateChangeReason"},
        "CreatedTime": {"$ref": "#/definitions/Timestamp"},
        "EnableDefaultInternetAccess": {"$ref": "#/definitions/BooleanObject"},
        "DomainJoinInfo": {"$ref": "#/definitions/DomainJoinInfo"},
        "ImageBuilderErrors": {"$ref": "#/definitions/ResourceErrors"}
      }
    },
    "ImageBuilderList": {"type": "array", "items": {"$ref": "#/definitions/ImageBuilder"}},
    "ImageBuilderState": {"type": "string", "enum": ["PENDING", "RUNNING", "STOPPING", "STOPPED", "REBOOTING", "SNAPSHOTTING", "DELETING", "FAILED"]},
    "ImageBuilderStateChangeReason": {"type": "object", "properties": {"Code": {"$ref": "#/definitions/ImageBuilderStateChangeReasonCode"}, "Message": {"$ref": "#/definitions/String"}}},
    "ImageBuilderStateChangeReasonCode": {"type": "string", "enum": ["INTERNAL_ERROR", "IMAGE_UNAVAILABLE"]},
    "ImageList": {"type": "array", "items": {"$ref": "#/definitions/Image"}},
    "ImageState": {"type": "string", "enum": ["PENDING", "AVAILABLE", "FAILED", "DELETING"]},
    "ImageStateChangeReason": {
      "type": "object",
      "properties": {"Code": {"$ref": "#/definitions/ImageStateChangeReasonCode", "description": "The state change reason code."}, "Message": {"$ref": "#/definitions/String", "description": "The state change reason message."}},
      "description": "Describes the reason why the last state change occurred."
    },
    "ImageStateChangeReasonCode": {"type": "string", "enum": ["INTERNAL_ERROR", "IMAGE_BUILDER_NOT_AVAILABLE"]},
    "IncompatibleImageException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The image does not support storage connectors."},
    "Integer": {"type": "integer"},
    "InvalidParameterCombinationException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "Indicates an incorrect combination of parameters, or a missing parameter."},
    "InvalidRoleException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The specified role is invalid."},
    "LimitExceededException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The requested limit exceeds the permitted limit for an account."},
    "ListAssociatedFleetsRequest": {
      "type": "object",
      "required": ["StackName"],
      "properties": {
        "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."}
      }
    },
    "ListAssociatedFleetsResult": {
      "type": "object",
      "properties": {
        "Names": {"$ref": "#/definitions/StringList", "description": "The names of the fleets."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "ListAssociatedStacksRequest": {
      "type": "object",
      "required": ["FleetName"],
      "properties": {
        "FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."}
      }
    },
    "ListAssociatedStacksResult": {
      "type": "object",
      "properties": {
        "Names": {"$ref": "#/definitions/StringList", "description": "The names of the stacks."},
        "NextToken": {"$ref": "#/definitions/String", "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."}
      }
    },
    "Long": {"type": "integer"},
    "Metadata": {"type": "array", "items": {"type": "object", "properties": {"key": {"$ref": "#/definitions/String"}, "value": {"$ref": "#/definitions/String"}}}},
    "Name": {"type": "string", "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$"},
    "OperationNotPermittedException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The attempted operation is not permitted."},
    "OrganizationalUnitDistinguishedName": {"type": "string", "maxLength": 2000},
    "OrganizationalUnitDistinguishedNamesList": {"type": "array", "items": {"$ref": "#/definitions/OrganizationalUnitDistinguishedName"}},
    "PlatformType": {"type": "string", "enum": ["WINDOWS"]},
    "ResourceAlreadyExistsException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The specified resource already exists."},
    "ResourceError": {"type": "object", "properties": {"ErrorCode": {"$ref": "#/definitions/FleetErrorCode"}, "ErrorMessage": {"$ref": "#/definitions/String"}, "ErrorTimestamp": {"$ref": "#/definitions/Timestamp"}}},
    "ResourceErrors": {"type": "array", "items": {"$ref": "#/definitions/ResourceError"}},
    "ResourceIdentifier": {"type": "string", "description": "The ARN of the resource.", "minLength": 1},
    "ResourceInUseException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The specified resource is in use."},
    "ResourceNotAvailableException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The specified resource exists and is not in use, but isn't available."},
    "ResourceNotFoundException": {"type": "object", "properties": {"Message": {"$ref": "#/definitions/ErrorMessage"}}, "description": "The specified resource was not found."},
    "SecurityGroupIdList": {"type": "array", "description": "The security group IDs.", "items": {"$ref": "#/definitions/String"}, "maxItems": 5},
    "ServiceAccountCredentials": {
      "type": "object",
      "required": ["AccountName", "AccountPassword"],
      "properties": {
        "AccountName": {
          "$ref": "#/definitions/AccountName",
          "description": "The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified."
        },
        "AccountPassword": {"$ref": "#/definitions/AccountPassword", "description": "The password for the account."}
      },
      "description": "Describes the credentials for the service account used by the streaming instance to connect to the directory."
    },
    "Session": {
      "type": "object",
      "required": ["Id", "UserId", "StackName", "FleetName", "State"],
      "properties": {
        "Id": {"$ref": "#/definitions/String", "description": "The ID of the streaming session."},
        "UserId": {"$ref": "#/definitions/UserId", "description": "The identifier of the user for whom the session was created."},
        "StackName": {"$ref": "#/definitions/String", "description": "The name of the stack for the streaming session."},
        "FleetName": {"$ref": "#/definitions/String", "description": "The name of the fleet for the streaming session."},
        "State": {"$ref": "#/definitions/SessionState", "description": "The current state of the streaming session."},
        "AuthenticationType": {"$ref": "#/definitions/AuthenticationType", "description": "The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML federation (<code>SAML</code>)."}
      },
      "description": "Describes a streaming session."
    },
    "SessionList": {"type": "array", "description": "List of sessions.", "items": {"$ref": "#/definitions/Session"}},
    "SessionState": {"type": "string", "enum": ["ACTIVE", "PENDING", "EXPIRED"], "description": "Possible values for the state of a streaming session."},
    "Stack": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "Arn": {"$ref": "#/definitions/Arn", "description": "The ARN of the stack."},
        "Name": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "Description": {"$ref": "#/definitions/String", "description": "The description displayed to end users."},
        "DisplayName": {"$ref": "#/definitions/String", "description": "The stack name displayed to end users."},
        "CreatedTime": {"$ref": "#/definitions/Timestamp", "description": "The time the stack was created."},
        "StorageConnectors": {"$ref": "#/definitions/StorageConnectorList", "description": "The storage connectors to enable."},
        "StackErrors": {"$ref": "#/definitions/StackErrors", "description": "The errors for the stack."}
      },
      "description": "Describes a stack."
    },
    "StackError": {
      "type": "object",
      "properties": {"ErrorCode": {"$ref": "#/definitions/StackErrorCode", "description": "The error code."}, "ErrorMessage": {"$ref": "#/definitions/String", "description": "The error message."}},
      "description": "Describes a stack error."
    },
    "StackErrorCode": {"type": "string", "enum": ["STORAGE_CONNECTOR_ERROR", "INTERNAL_SERVICE_ERROR"]},
    "StackErrors": {"type": "array", "description": "The stack errors.", "items": {"$ref": "#/definitions/StackError"}},
    "StackList": {"type": "array", "description": "The stacks.", "items": {"$ref": "#/definitions/Stack"}},
    "StartFleetRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String", "description": "The name of the fleet."}}},
    "StartFleetResult": {"type": "object", "properties": {}},
    "StartImageBuilderRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String"}}},
    "StartImageBuilderResult": {"type": "object", "properties": {"ImageBuilder": {"$ref": "#/definitions/ImageBuilder"}}},
    "StopFleetRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String", "description": "The name of the fleet."}}},
    "StopFleetResult": {"type": "object", "properties": {}},
    "StopImageBuilderRequest": {"type": "object", "required": ["Name"], "properties": {"Name": {"$ref": "#/definitions/String"}}},
    "StopImageBuilderResult": {"type": "object", "properties": {"ImageBuilder": {"$ref": "#/definitions/ImageBuilder"}}},
    "StorageConnector": {
      "type": "object",
      "required": ["ConnectorType"],
      "properties": {
        "ConnectorType": {"$ref": "#/definitions/StorageConnectorType", "description": "The type of storage connector."},
        "ResourceIdentifier": {"$ref": "#/definitions/ResourceIdentifier", "description": "The ARN of the storage connector."}
      },
      "description": "Describes a storage connector."
    },
    "StorageConnectorList": {"type": "array", "description": "The storage connectors.", "items": {"$ref": "#/definitions/StorageConnector"}},
    "StorageConnectorType": {"type": "string", "enum": ["HOMEFOLDERS"], "description": "The type of storage connector."},
    "StreamingUrlUserId": {"type": "string", "pattern": "[\\w+=,.@-]*", "minLength": 2, "maxLength": 32},
    "String": {"type": "string", "minLength": 1},
    "StringList": {"type": "array", "items": {"$ref": "#/definitions/String"}},
    "SubnetIdList": {"type": "array", "description": "The subnet IDs.", "items": {"$ref": "#/definitions/String"}},
    "Timestamp": {"type": "string", "format": "date-time"},
    "UpdateDirectoryConfigRequest": {
      "type": "object",
      "required": ["DirectoryName"],
      "properties": {
        "DirectoryName": {"$ref": "#/definitions/DirectoryName", "description": "The name of the directory configuration."},
        "OrganizationalUnitDistinguishedNames": {"$ref": "#/definitions/OrganizationalUnitDistinguishedNamesList", "description": "The distinguished names of the organizational units for computer accounts."},
        "ServiceAccountCredentials": {"$ref": "#/definitions/ServiceAccountCredentials", "description": "The credentials for the service account used by the streaming instance to connect to the directory."}
      }
    },
    "UpdateDirectoryConfigResult": {"type": "object", "properties": {"DirectoryConfig": {"$ref": "#/definitions/DirectoryConfig", "description": "Information about the directory configuration."}}},
    "UpdateFleetRequest": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "ImageName": {"$ref": "#/definitions/String", "description": "The name of the image used by the fleet."},
        "Name": {"$ref": "#/definitions/String", "description": "A unique name for the fleet."},
        "InstanceType": {
          "$ref": "#/definitions/String",
          "description": "<p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>"
        },
        "ComputeCapacity": {"$ref": "#/definitions/ComputeCapacity", "description": "The desired capacity for the fleet."},
        "VpcConfig": {"$ref": "#/definitions/VpcConfig", "description": "The VPC configuration for the fleet."},
        "MaxUserDurationInSeconds": {"$ref": "#/definitions/Integer", "description": "The maximum time that a streaming session can run, in seconds. Specify a value between 600 and 57600."},
        "DisconnectTimeoutInSeconds": {
          "$ref": "#/definitions/Integer",
          "description": "The time after disconnection when a session is considered to have ended, in seconds. If a user who was disconnected reconnects within this time interval, the user is connected to their previous session. Specify a value between 60 and 57600."
        },
        "DeleteVpcConfig": {"$ref": "#/definitions/Boolean", "description": "Deletes the VPC association for the specified fleet."},
        "Description": {"$ref": "#/definitions/Description", "description": "The description displayed to end users."},
        "DisplayName": {"$ref": "#/definitions/DisplayName", "description": "The fleet name displayed to end users."},
        "EnableDefaultInternetAccess": {"$ref": "#/definitions/BooleanObject", "description": "Enables or disables default internet access for the fleet."},
        "DomainJoinInfo": {"$ref": "#/definitions/DomainJoinInfo", "description": "The information needed for streaming instances to join a domain."},
        "AttributesToDelete": {"$ref": "#/definitions/FleetAttributes", "description": "The fleet attributes to delete."}
      }
    },
    "UpdateFleetResult": {"type": "object", "properties": {"Fleet": {"$ref": "#/definitions/Fleet", "description": "Information about the fleet."}}},
    "UpdateStackRequest": {
      "type": "object",
      "required": ["Name"],
      "properties": {
        "DisplayName": {"$ref": "#/definitions/DisplayName", "description": "The stack name displayed to end users."},
        "Description": {"$ref": "#/definitions/Description", "description": "The description displayed to end users."},
        "Name": {"$ref": "#/definitions/String", "description": "The name of the stack."},
        "StorageConnectors": {"$ref": "#/definitions/StorageConnectorList", "description": "The storage connectors to enable."},
        "DeleteStorageConnectors": {"$ref": "#/definitions/Boolean", "description": "Deletes the storage connectors currently enabled for the stack."}
      }
    },
    "UpdateStackResult": {"type": "object", "properties": {"Stack": {"$ref": "#/definitions/Stack", "description": "Information about the stack."}}},
    "UserId": {"type": "string", "minLength": 2, "maxLength": 32},
    "VisibilityType": {"type": "string", "enum": ["PUBLIC", "PRIVATE"]},
    "VpcConfig": {
      "type": "object",
      "properties": {
        "SubnetIds": {"$ref": "#/definitions/SubnetIdList", "description": "The subnets to which a network interface is established from the fleet instance."},
        "SecurityGroupIds": {"$ref": "#/definitions/SecurityGroupIdList", "description": "The security groups for the fleet."}
      },
      "description": "Describes VPC configuration information."
    }
  }
}
